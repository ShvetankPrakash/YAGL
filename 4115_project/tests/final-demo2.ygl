Graph hello; /* declare graph */

String hello_world = ""; /* declare string holder */

/* declare nodes */
Node break("");
Node h("h");
Node e("e");
Node l("l");
Node l2("l");
Node o("o");
Node space(" ");
Node w("w");
Node o2("o");
Node r("r");
Node l3("l");
Node d("d");
Node excl("!");

/* populate graph */
hello: + h + e + l + l2 + o + space + w + o2 + r + l3 + d + excl,
	 h -> e -> l -> l2 -> o -> space -> w -> o2 -> r -> l3 -> d -> excl;

/* Generate array of nodes based on depth */
int num_nodes = hello.num_nodes;
Node[11] nodes;
int on = 0;
while (on < num_nodes + 1) {
	nodes[on] = dfs_node(hello, h, break, on);
   	on = on + 1;
}

/* Populate hello_world string from nodes */
on = 0;
while (on < num_nodes ) {
	Node curr = nodes[on];
	hello_world = hello_world + curr.name;
        on = on + 1;
}

/* Done! Hello world! */
print(hello_world);

/* modified lib function */
Node dfs_helper_node(Graph g, Node vertex, Node break, int depth){
   if (vertex.visited == true) {
       return break;
   }

   if (depth == vertex.curr_dist) {
       return vertex;
   }
   vertex.visited = true;

   int size = g.num_neighbors[vertex];
   int curr = 0;

   while (curr < size) {
      Node current;
      current = g.neighbor[vertex, curr];
      if (current.curr_dist == 0) {
          current.curr_dist = vertex.curr_dist + 1;
      }
      curr = curr + 1;
   }
   curr = 0;
   Node new(""); /* just a place holder */
   while (curr < size) {
      Node current;
      current = g.neighbor[vertex, curr];
      /*print(g.weight[current, vertex]);*/
      new = dfs_helper_node(g, current, break, depth);
      if (new == break) {
      } else {
        return new;
      }
      curr = curr + 1;
   }
   return new;
}

void reset(Graph g) {
    int size = g.num_nodes;
    int curr = 0;

    while (curr < size) {
      Node current;
      current = g.node[curr];
      current.visited = false;
      current.curr_dist = 0;
      curr = curr + 1;
    }
}

Node dfs_node(Graph g, Node vertex, Node b, int depth) {

	reset(g);
	return dfs_helper_node(g, vertex, b, depth);

}
